#!/usr/bin/env bash

# Find the fin command
fin=`which fin`

# Source the file to use functions
[[ -f ${fin} ]] && source $fin

## Docksal Provider Interaction commands.
##
## Usage: pull <options> <assets>
##
## Possible Options for Asssets:
## init                               Pull a project repo down
## db                                 Export a database from the provider
## files                              Rsync files from remote to local
## code                               Execute a pull on code
## (blank)                            All (Default)
##
## Options: 
##  --hosting-platform=<provider>     Platform to interact with.
##                                    Options: acquia, pantheon, platform.sh, drush, wp
##  --hosting-site=<id>               Site ID on Provider
##  --hosting-env=<env>               Site Env on Provider
##
## Extra Options for Code
##  --sync-git-remote                 The GIT Remote to pull from. (Defaults to origin)
##  --sync-git-branch                 The GIT Branch to pull from. (Defaults to current branch)
##
## Extra Options for DB
##  --db-user=<user>                  Specify the DB User (Defaults to root)
##  --db-pass=<pass>                  Specify the DB Password (Defaults to root)
##  --db-name=<dbname>                Specify the DB Name to import into. (Defaults to default)
##  --force                           Generate and pull a new db dump, rather than using locally cached in /tmp
##  --remote-db=<remotedb>            Specify the remote DB name to pull. (Used with Acquia)
##  --progress                        Show import progress
##
## Extra Options for Files
##  --rsync-options=<options>         Rsync Options to append.
##  --files-dir=<dir>                 Directory to sync files with.
##                                    Default Drupal: {DOCROOT}/sites/default/files/
##                                    Wordpress Default: {DOCROOT}/wp-content/uploads/
##
## Examples:
##  fin pull init                     Start a project by pulling the repo from the provider.
##     --hosting-platform=acquia      Provide the Platform Name.
##     --hosting-site=testsiteid      Provide the Site ID.
##     test_project_directory         Specify the directory to clone the project in.
##  fin pull                          Pull all items from provider
##  fin pull db                       Pull only the db from the provider
##  fin pull db --remote-db=dbname    Pull the db name dbname from the provider. (Acquia Cloud Only)

# Pull main command for interacting with Hosting Providers.
# $1 - action to run (init, db, files, code)
# $2 -
#	- project directory (when ran with init)
#	- db name (when ran in with Acquia DB pull)
# $3 -
#	- git url (when ran in with Drush / WP init)
# $4 -
#	- git branch (when ran in with Drush / WP init)
# $hostingplatform - the hosting platform name.
# $hostingsite - the site id on the hosting platform.
# $hostingenv - the env id on the hosting platform for the site.
provider_pull ()
{
	# Set Columns to 200 so text wouldn't
	# get cut off when testing in CI.
	COLUMNS=200

	eval $(parse_params "$@")

	local hostingplatform=${HOSTING_PLATFORM:-${hostingplatform}}
	local hostingsite=${HOSTING_SITE:-${hostingsite}}
	local hostingenv=${HOSTING_ENV:-${hostingenv}}

	if [[ "${hostingplatform}" == "" || "${hostingsite}" == ""  ]]; then
		echo-error "Hosting Provider not set up. Following variables must be set: hostingplatform and hostingsite"
		exit 1
	fi

	hostingplatform=$(echo ${hostingplatform} | tr '[:upper:]' '[:lower:]')

	# Check to see if a support platform is supported.
	if [[ " acquia pantheon platformsh drush wp " != *" ${hostingplatform} "* ]]; then
		echo-error "Only the following platforms are supported: Acquia (acquia), Pantheon (pantheon), Platform.sh (platformsh), Drupal (drush), and WordPress (wp)."
		exit 1
	fi

	# Run some checks before continuing.
	provider_pull_find_function ${hostingplatform} 'precheck'

	echo-green "Starting provider pull for ${hostingplatform}"

	# Query the provider for the given repo url. Only Pantheon, Platform.sh, and Acquia support this.
	# All others will need to do a git clone.
	if [[ "${ARGV[0]}" == "init" ]]; then
		provider_pull_init
		return
	fi

	# Execute a Pull On Code.
	if [[ "${ARGV[0]}" == "code" ]] || [[ "${ARGV[0]}" == "" ]]; then
		provider_pull_code
	fi

	# Execute a Pull on DB.
	if [[ "${ARGV[0]}" == "db" ]] || [[ "${ARGV[0]}" == "" ]];  then
		provider_pull_db
	fi

	# Execute a pull on Files.
	if [[ "${ARGV[0]}" == "files" ]] || [[ "${ARGV[0]}" == "" ]]; then
		provider_pull_files
	fi

	echo-green "Pull Completed"
}

# Provider Pull Init Subcommand
# Used specifically for pulling the repo from a provider.
# $1 - directory to clone the repo into
# $2 - git repo url (optional)
# $3 - git branch url (optional)
provider_pull_init ()
{
	echo-green "Starting Pull Init Process."
	local project_directory=${ARGV[1]:-${hostingsite}}

	# Check to see if project_directory already exists.
	if [[ -d ${project_directory} ]]; then
		echo-error "Project Directory ${project_directory} already exists."
		exit 1
	fi

	provider_pull_find_function ${hostingplatform} 'init' 1 "Init function not currently supported for ${hostingplatform}."
	echo-green "Pulling code complete."

	# Change into the project directory.
	cd "${project_directory}"

	# Check to see if .docksal directory exists.
	if [[ ! -d .docksal ]]; then
		if [[ "$y" != "y" && "$yes" != "yes" ]]; then
			_confirm "Project is not a docksal project. Would you like to generate config?"
		fi
		config_generate
	fi

	# Set the Current Hosting Platform and Hosting Site for project.
	config_set "HOSTING_PLATFORM=${hostingplatform}" > /dev/null
	config_set "HOSTING_SITE=${hostingsite}" > /dev/null
	config_set "HOSTING_ENV=${hostingenv}" > /dev/null
	addon_file_path="$(addon_get_path init)"
	if [[ ! -z "$addon_file_path" ]] && [[ -x "$addon_file_path" ]]; then
		if _confirm "Init command found for project run?" --no-exit; then
			addon_execute "$addon_file_path"
		fi
	fi
}

# Generic Precheck function to check if ${hostingenv} variable is set.
provider_pull_precheck ()
{
	# After Init Process Let's Check to Make sure hostingenv has been set.
	if [[ "${hostingenv}" == "" ]]; then
		echo-error "hostingenv variable is required to continue."
		exit 1
	fi
}

# Provider Pull Code Subcommand
# Used specifically for pulling the repo from a provider.
provider_pull_code ()
{
	echo-green "Pulling code"
	provider_pull_find_function ${hostingplatform} 'code' 1
	if_failed_error "Error pulling code from ${hostingplatform}."
	echo-green "Code Pull Successful"
}

# Provider Pull DB Subcommand
# Used specifically for pulling the db from a provider.
# $1 - database name to connect to
provider_pull_db ()
{
	if [[ "$y" != "y" && "$yes" != "yes" ]]; then
		_confirm "Existing database will be truncated, Continue?"
	fi

	echo-green "Pulling DB"

	# Variables to set for local use.
	local __db_user="${dbuser:-root}"
	local __db_password="${dbpass:-root}"
	local __db_database="${dbname:-default}"

	# Set the db file that will be stored within the cli container
	local db_file="/tmp/${__db_database}.${hostingenv}.${hostingsite}.sql.gz"
	# Check to see if the file exists in the cli container
	local file_exists=$(_exec "ls -1 /tmp/**  2> /dev/null | grep \"${db_file}\"\$ | wc -l | tr -d '[:space:]'")
	# Get the time of that file within the cli container.
	local file_time=$(_exec "find ${db_file} -mmin +360 2> /dev/null | tr -d '[:space:]'")
	# Get the time from 24 hours ago.
	local yesterday=$(_exec date --date='yesterday' "+%Y-%m-%d %H:%M:%S");

	# Use cli's pv for progress if requested.
	local progress_pipe='cat'
	if ( [[ "$progress" == "progress" ]] ); then
		progress_pipe='pv'
	fi

	# Check to see if file doesn't exist, or if file exists and is older, or using force flag
	if ( [[ "${file_exists}" == "0" ]] && [[ "${file_time}" == "" ]] ) || ( [[ "${file_exists}" > "0" ]] && [[ "${file_time}" != "" ]] ) || [[ "${force}" == "force" ]]; then
		# Check to see if File Is Older than 1 hour
		if ( [[ "${file_exists}" > "0" ]] && [[ "${file_time}" != "" ]] ) || [[ "${force}" == "force" ]]; then
			echo -e "${acqua}Cached DB file needs updating${NC}"
			echo -e "${acqua}Removing old database file${NC}"
			_exec rm -f "${db_file}"
		fi

		echo -e "${acqua}Pulling new database file...${NC}"
		provider_pull_find_function ${hostingplatform} 'db' 1
	else
		echo-green "Cached DB file still valid found and using to import"
	fi

	# ToDo: Do we need to account for Multi-Site and other DB Names?

	# Import the Database.
	# Truncate the existing db.
	echo -e "${acqua}Truncating Existing Database${NC}"
	mysql_db_truncate "${dbname}" > /dev/null
	# Execute ZCAT on the db file and import into mysql database.
	echo -e "${acqua}Importing DB file...${NC}"
	_exec "${progress_pipe} ${db_file} | zcat | mysql -u ${__db_user} -p${__db_password} -h db ${__db_database}"
	if_failed_error "Error importing DB"
	echo-green "DB Pull Successful"
}

# Provider Pull Files Subcommand
# Used specifically for pulling the db from a provider.
provider_pull_files ()
{
	if [[ "$y" != "y" && "$yes" != "yes" ]]; then
		_confirm "The following will delete all files within the files directory, Continue?"
	fi
	echo -e "${acqua}Pulling Files...${NC}"

	# Default directory for Drupal Files.
	local drupal_files="sites/default/files/"
	# Default directory for WordPress Files.
	local wordpress_files="wp-content/uploads/"

	# Default to Drupal Specifically.
	local default_dir=${drupal_files}
	# If find a wp-config.php file in the docroot set to wordpress_files
	if [[ -f ${PROJECT_ROOT}/${DOCROOT}/wp-config.php ]]; then
		default_dir=${wordpress_files}
	fi

	# Allow for this to be modified with the --filesdir option.
	filesdir=${filesdir:-$default_dir}
	# Exclude specific items by default. Allow other rsync options to be included using --rsync-options flag.
	local rsyncoptions="${rsyncoptions} --exclude='styles' --exclude='css' --exclude='js'"
	provider_pull_find_function ${hostingplatform} 'files' 1
	echo-green "File Pull Complete"
}

# GENERIC PROVIDER FUNCTIONS

# Generic function for searching if function exists and executing.
# Searches for a function that is in the format of provider_pull_${PROVIDER}_${ACTION}
# $1 - the provider machine name to check
# $2 - the action to perform for the provider (Examples db, files, code)
# $3 - any value to indicate this function is required to exist
# $4 - the message to display if this function cannot be found
provider_pull_find_function ()
{
	# Providers name to attach to function.
	local provider=$1
	# Action for provider.
	local action=$2
	# Is this function required. Any value is acceptable.
	local required=$3
	# If required what is the error message if not found.
	local required_message=${4:-"Pulling ${action} is currently not supported for ${provider}."}

	# Check for help function for specific command
	local pull_function="provider_pull_${provider}_${action}"
	type "${pull_function}" >/dev/null 2>&1
	[[ $? -eq 0 ]] && ${pull_function} || ( [[ -n $required ]] && echo "${required_message}" )
}

# Runs a git pull on the project repo.
provider_pull_generic_git_pull ()
{
	local git_remote=${syncgitremote:-origin}
	# Trim \r from output (necessary on Windows)
	local current_branch=$(_exec "git rev-parse --abbrev-ref HEAD" | tr -d '\r')
	local git_branch=${syncgitbranch:-$current_branch}
	echo -e "${acqua}Pulling Code From ${git_remote} - ${git_branch}${NC}"
	_exec -T "git pull -q ${git_remote} ${git_branch} 2>/dev/null"
	if_failed_error "Error Pulling Code from ${git_remote} - ${git_branch}"
}

# Runs a generic drush rsync command.
provider_pull_generic_drush_rsync ()
{
	cd ${PROJECT_ROOT}/${DOCROOT}
	echo -e "${acqua}Downloading Files from ${hostingsite} on the ${hostingenv} environment${NC}"
	local drush_version=$(_exec "drush version --format=string | cut -d'.' -f1" | sed "s/[[:space:]]//")
	local separator=""
	if [[ "$drush_version" == "9" ]]; then
		separator="--"
	fi
	local rsync_filesdir
	rsync_filesdir="/var/www/${DOCROOT}/${filesdir}"
	_exec drush -q -y rsync \
		@${hostingsite}.${hostingenv}:%files \
		${rsync_filesdir} \
		${separator} \
		--delete \
		${rsyncoptions} 2>/dev/null
	if_failed_error "Error Downloading Files from ${hostingsite} on the ${hostingenv} environment"
}

# Generic Git Clone for Init Function
# $1 - git repo to clone
# $2 - repo branch to checkout
provider_pull_generic_init ()
{
	local repo_url="$1"
	if [[ -z "${repo_url}" ]]; then
		echo-error "Repository URL required for Drush Project to init."
		exit 1
	fi
	local repo_checkout=${2:-"master"}
	echo -e "${acqua}Cloning Site Locally: ${hostingsite} - ${hostingenv} in ${project_directory}${NC}"
	run_cli "git clone -q --depth=1 --branch='${repo_checkout}' ${repo_url} ${project_directory} 2>/dev/null"
	if_failed_error "Error Cloning Repo"
}

# ACQUIA PROVIDER FUNCTIONS

# Check to see if acquia keys have been set.
provider_pull_acquia_precheck ()
{
	if [[ -z "${SECRET_ACAPI_EMAIL}" ]] || [[ -z "${SECRET_ACAPI_KEY}" ]]; then
		echo-error "SECRET_ACAPI_EMAIL and SECRET_ACAPI_KEY must be set in order to work with Acquia."
		exit 1;
	fi

	if [[ "${ARGV[0]}" == "init" ]]; then
		return;
	fi

	provider_pull_precheck
}

# Init process to pull code from acquia.
provider_pull_acquia_init ()
{
	local acquia_alias_update="drush8 -q acquia-update; [[ -d "~/.drush/site-aliases" ]] && mv ~/.drush/*.aliases.* ~/.drush/site-aliases/"

	# Set hostingenv to dev if none are set.
	hostingenv=${hostingenv:-dev}
	# Get the repo url for the specific environment.provider_pull_platformsh_files
	local repo_url
	repo_url=$(run_cli -T "${acquia_alias_update}; drush8 @${hostingsite}.${hostingenv} ac-site-info | grep 'vcs_url' | awk '{print \$3}' | tr -d '[:space:]'")
	if_failed_error "Error accessing Acquia Cloud API to get Project Git Repo"
	# Get the branch for the specific environment.
	local repo_checkout
	repo_checkout=$(run_cli -T "${acquia_alias_update}; drush8 @${hostingsite}.${hostingenv} ac-environment-info | grep 'vcs_path' | awk '{print \$3}' | sed 's/tags\///g' | tr -d '[:space:]'")
	if_failed_error "Error accessing Acquia Cloud API to get ${hostingenv} info."

	echo -e "${acqua}Cloning Acquia Site Locally: ${hostingsite} - ${hostingenv} in ${project_directory}${NC}"
	# Run a git clone to get the specific repo.
	run_cli "git clone -q --depth=1 --branch='${repo_checkout}' ${repo_url} ${project_directory}" 2>/dev/null
	if_failed_error "Error cloning Acquia Project."
}

# Pull process to pull files from Acquia.
provider_pull_acquia_files ()
{
	local acquia_alias_update="drush8 -q acquia-update; [[ -d "~/.drush/site-aliases" ]] && mv ~/.drush/*.aliases.* ~/.drush/site-aliases/"

	# Update Acquia Drush Aliases in container.
	_exec "${acquia_alias_update}"

	# Execute a generic rsync on files from remote.
	provider_pull_generic_drush_rsync
}

# Pull process to pull db from Acquia.
provider_pull_acquia_db ()
{
	local acquia_alias_update="drush8 -q acquia-update; [[ -d "~/.drush/site-aliases" ]] && mv ~/.drush/*.aliases.* ~/.drush/site-aliases/"

	# Update Acquia Drush Aliases in container.
	_exec "${acquia_alias_update}"

	# TODO: Allow for all databases to be downloaded. drush ac-database-list will list all databases for a site.
	# Following will grab all databases for a site.
	# local acquia_dbs=$(_exec drush @${hostingsite}.${hostingenv} ac-database-list | awk '{print $3}')

	# Default Acquia DB Name to project name.
	local acquia_db_name="${remotedb:-${hostingsite}}"
	if [[ -z "${acquia_db_name}" ]]; then
		echo-error "Database name is required."
		exit 1
	fi

	local query
	query=$(_exec drush8 @${hostingsite}.${hostingenv} ac-database-instance-backup-list ${acquia_db_name})
	if_failed_error "Error retrieving list of backups from Acquia for ${hostingsite} - ${hostingenv} for database ${acquia_db_name}"

	# Returns timestamp of last backup.
	local last_date
	last_date=$(printf "${query}" | grep started | tail -n 1 | awk '{ print $3 }' | tr -d '[:space:]')
	if [[ "${last_date}" != "" ]]; then
		# Convert Date To Y-m-d H:m:s format
		last_date=$(_exec date --date=@${last_date} "+%Y-%m-%d %H:%M:%S")
	fi

	# If Last backup was more than 24 hours ago. Create one.
	if [[ "${last_date}" < "${yesterday}" ]] || [[ "$force" == "force" ]]; then
		# Create backup on Acquia through Cloud API.
		echo -e "${acqua}Creating new backup on Acquia for ${hostingsite} - ${hostingenv} for database ${acquia_db_name}${NC}"
		_exec drush8 -q @${hostingsite}.${hostingenv} ac-database-instance-backup ${acquia_db_name}
		if_failed_error "Error creating backup on Acquia for ${acquia_db_name}."
		echo -e "${acqua}Backup queued on Acquia for ${hostingsite} - ${hostingenv} for database ${acquia_db_name} waiting 10 seconds to finish${NC}"
		# Sleep for 10 seconds wait for backup to finish.
		sleep 10
		# Requery to get a new list of backups.
		query=$(_exec drush8 @${hostingsite}.${hostingenv} ac-database-instance-backup-list ${acquia_db_name})
		if_failed_error "Error retrieving list of backups from Acquia on site ${hostingsite} on environment ${hostingenv} for database ${acquia_db_name}"
	else
		echo -e "${acqua}Using latest backup from Acquia for ${hostingsite} - ${hostingenv} for database ${acquia_db_name}${NC}"
	fi

	# Returns id of last backup.
	local last_id=$(printf "${query}" | grep "^ id" | tail -n 1 | awk '{ print $3 }' | tr -d '[:space:]')
	# Use Drush to download the latest file using the Acquia Cloud API.
	echo -e "${acqua}Downloading backup from Acquia for ${hostingsite} - ${hostingenv} for database ${acquia_db_name}${NC}"
	_exec "drush8 -q @${hostingsite}.${hostingenv} ac-database-instance-backup-download ${acquia_db_name} ${last_id} | ${progress_pipe} > ${db_file}"
	if_failed_error "Error Downloading backup from Acquia for ${hostingsite} - ${hostingenv} for database ${acquia_db_name}"
}

# Pull process to pull files from Acquia.
provider_pull_acquia_code ()
{
	# Execute a generic git pull on code.
	provider_pull_generic_git_pull
}

# PANTHEON PROVIDER FUNCTIONS

# Check to see if tokens are set correctly.
provider_pull_pantheon_precheck ()
{
	if [[ -z "${SECRET_TERMINUS_TOKEN}" ]]; then
		echo-error "SECRET_TERMINUS_TOKEN must be set in order to work with Pantheon."
		exit 1;
	fi

	if [[ "${ARGV[0]}" == "init" ]]; then
		return;
	fi

	provider_pull_precheck
}

# Init process to pull code from Pantheon
provider_pull_pantheon_init ()
{
	# If hostingenv isn't set default to dev.
	hostingenv=${hostingenv:-dev}
	# Set the BRANCH to be what the hostingenv is.
	local repo_checkout=${hostingenv}
	# The URL for the repo to clone.
	local repo_url
	repo_url=$(run_cli -T "terminus connection:info ${hostingsite}.dev --field=\"Git Command\" | awk '{print \$3}'")
	if_failed_error "Error retrieving Git URL from Pantheon"

	if [[ "${hostingenv}" == 'dev' ]]; then
		# If hostingenv is set to dev set the repo_checkout to be master.
		repo_checkout='master'
	elif [[ "${hostingenv}" == 'test' ]] || [[ "${hostingenv}" == "live" ]]; then
		# If hostingenv is test or live get the latest tag for the repo.
		repo_checkout=$(run_cli -T "git ls-remote --exit-code -t ${repo_url} | grep 'refs/tags/pantheon_${hostingenv}_' | awk '{print $2}' | cut -d'/' -f3 | sort -k1.15n | grep '[0-9]$' | tail -1 | tr -d '[:space:]'")
		if_failed_error "Error getting latest tag for ${hostingenv} on Pantheon repo"
	fi

	echo -e "${acqua}Cloning Pantheon Site Locally: ${hostingsite} - ${hostingenv} in ${project_directory}${NC}"
	# Run git clone and checkout the provided branch.
	run_cli "git clone -q --depth=1 --branch='${repo_checkout}' ${repo_url} ${project_directory}"
	if_failed_error "Error cloning Pantheon project ${hostingsite} - ${hostingenv} in ${project_directory}"
}

# Pull process to pull files from Pantheon.
# Need to run a custom rsync command as every environment is different.
provider_pull_pantheon_files ()
{
	# Get the SFTP Hostname from Site's Info.
	local host_url
	host_url=$(_exec -T "terminus connection:info ${hostingsite}.${hostingenv} --field=\"SFTP Command\" 2>/dev/null | awk '{print \$4}'")
	if_failed_error "Could not communicate with Pantheon. Check connection and SECRET_TERMINUS_TOKEN is set to an active token."
	echo -e "${acqua}Downloading Files from ${hostingsite} on the ${hostingenv} through Pantheon${NC}"
	# Execute a rsync using Pantheon recommended Options.
	_exec "rsync \
		-rlz \
		--copy-unsafe-links \
		--size-only \
		--ipv4 \
		--progress \
		-e 'ssh -p 2222' \
		${host_url}:files/ \
		/var/www/${DOCROOT}/${filesdir} \
		--delete \
		${rsyncoptions}"
	if_failed_error "Could not rsync files from Pantheon. Confirm that SSH Key has been added to Pantheon account and added to Docksal SSH-Agent."
}

# Pull process to pull db from Pantheon.
# Pull from Pantheon backup system so that can pull the live db and not impact the site performance.
provider_pull_pantheon_db ()
{
	# Get Time of Last Backup In Pantheon.
	local last_backup
	last_backup=$(_exec -T "terminus backup:list ${hostingsite}.${hostingenv} --element=db --format=list --field=date | head -n 1")
	if_failed_error "Error retrieving list of backups from Pantheon for ${hostingsite} on the ${hostingenv} environment"
	if [[ "last_backup" == "" ]] || [[ "${last_backup}" < "${yesterday}" ]] || [[ "$force" == "force" ]]; then
		# If last backup does not exist or is older than 24 hours create new one.
		echo -e "${acqua}Creating new backup on Pantheon for ${hostingsite} on the ${hostingenv} environment${NC}"
		_exec terminus backup:create ${hostingsite}.${hostingenv} --element=db
		if_failed_error "Error creating backup on Pantheon for ${hostingsite} on the ${hostingenv} environment"
	fi
	# Download backup with Terminus to given location.
	echo -e "${acqua}Downloading database backup from Pantheon for ${hostingsite} on the ${hostingenv} environment${NC}"
	_exec terminus backup:get ${hostingsite}.${hostingenv} --element="db" --to="${db_file}"
	if_failed_error "Error Downloading backup from Pantheon for ${hostingsite} on the ${hostingenv} environment"
}

# Pull process to pull files from Pantheon.
provider_pull_pantheon_code ()
{
	# Execute a generic git pull on code.
	provider_pull_generic_git_pull
}

# PLATFORM.SH PROVIDER FUNCTIONS

# Check to see if tokens are set correctly.
provider_pull_platformsh_precheck ()
{
	if [[ -z "${SECRET_PLATFORMSH_CLI_TOKEN}" ]]; then
		echo-error "SECRET_PLATFORMSH_CLI_TOKEN must be set in order to work with Platform.sh."
		exit 1
	fi

	if [[ "${ARGV[0]}" == "init" ]]; then
		return;
	fi

	provider_pull_precheck
}

# Init process to pull code from Platform.sh
provider_pull_platformsh_init ()
{
	# If hostingenv isn't set use master as default.
	hostingenv=${hostingenv:-master}
	echo -e "${acqua}Cloning Platform.sh Site Locally: ${hostingsite} - ${hostingenv} in ${project_directory}${NC}"
	run_cli "platform project:get -q --environment=${hostingenv} ${hostingsite} ${project_directory}"
	if_failed_error "Could not communicate with Platform.sh. Check connection and SECRET_PLATFORMSH_CLI_TOKEN is set to an active token."
}

# Pull process to pull files from Platform.sh
provider_pull_platformsh_files ()
{
	local host_url
	host_url=$(_exec -T "platform ssh --pipe --project=${hostingsite} --environment=${hostingenv} 2>/dev/null");
	if_failed_error "Could not communicate with Platform.sh. Check connection and SECRET_PLATFORMSH_CLI_TOKEN is set to an active token."
	echo -e "${acqua}Downloading Files from ${hostingsite} on the ${hostingenv} through Platform.sh${NC}"
	_exec rsync \
		-rlz \
		--copy-unsafe-links \
		--size-only \
		--ipv4 \
		--progress \
		${host_url}:/app/${DOCROOT}/${filesdir} \
		/var/www/${DOCROOT}/${filesdir} \
		--delete \
		${rsyncoptions}
	if_failed_error "Could not rsync files from Platform.sh. Confirm that SSH Key has been added to Platform.sh account and added to Docksal SSH-Agent."
}

# Pull process to pull db from Platform.sh
provider_pull_platformsh_db ()
{
	echo -e "${acqua}Downloading database backup from Platform.sh for ${hostingsite} on the ${hostingenv} environment${NC}"
	_exec "platform -q db:dump -p ${hostingsite} -e ${hostingenv} --gzip --stdout | ${progress_pipe} > ${db_file}"
	if_failed_error "Error Downloading backup from Platform.sh for ${hostingsite} on the ${hostingenv} environment"
}

# Pull process to pull code from Platform.sh.
provider_pull_platformsh_code ()
{
	syncgitremote=${syncgitremote:-"platform"}
	# Execute a generic git pull on code.
	provider_pull_generic_git_pull
}

# DRUSH PROVIDER FUNCTIONS

# Execute a generic git clone on the provided.
provider_pull_drush_init ()
{
	provider_pull_generic_init "${ARGV[2]}" "${ARGV[3]}"
	if_failed_error "Could not communicate with Drush site repo. Check connection and try again."
}

# Use Generic Precheck function to makes sure env is set.
provider_pull_drush_precheck ()
{
	if [[ "${ARGV[0]}" == "init" ]]; then
		return;
	fi

	provider_pull_precheck
}

# Execute a generic rsync on files from remote.
provider_pull_drush_files ()
{
	provider_pull_generic_drush_rsync
}

# Pull database from the drush provider using the alias. Exclude cache, session, and watchdog data.
provider_pull_drush_db ()
{
	cd ${PROJECT_ROOT}/${DOCROOT}
	# Execute drush sql-dump on remote host and exclude cache, session, watchdog tables.
	echo -e "${acqua}Creating database export for @${hostingsite}.${hostingenv}${NC}"
	# Drush appends a .gz when using the --gzip option. Remove .gz extension.
	local db_save=$(echo $db_file | sed 's/\.gz//')
	_exec drush -q -y @${hostingsite}.${hostingenv} sql-dump --structure-tables-list="cache,cache_*,sessions,watchdog" --gzip --result-file="${db_save}.export" 2>/dev/null
	if_failed_error "Error accessing Drush Site @${hostingsite}.${hostingenv} to create database export"
	# Rsync database file locally
	echo -e "${acqua}Downloading database export for @${hostingsite}.${hostingenv}${NC}"
	_exec drush -q -y rsync @${hostingsite}.${hostingenv}:${db_save}.export.gz ${db_file} 2>/dev/null
	if_failed_error "Error accessing Drush Site @${hostingsite}.${hostingenv} to download database export"
}

# Pull process to pull files from Drush.
provider_pull_drush_code ()
{
	provider_pull_generic_git_pull
}

# WORDPRESS PROVIDER FUNCTIONS

# Execute a generic git clone on the provided.
provider_pull_wp_init ()
{
	provider_pull_generic_init "${ARGV[2]}" "${ARGV[3]}"
	if_failed_error "Could not communicate with WP site repo. Check connection and try again."
}

# Pull db from provider using the wp db export function.
provider_pull_wp_db ()
{
	cd ${PROJECT_ROOT}/${DOCROOT}
	echo -e "${acqua}Downloading database export for @${hostingsite}${NC}"
	_exec "wp @${hostingsite} db export --add-drop-table - | gzip > ${db_file}"
	if_failed_error "Error accessing WordPress Site @${hostingsite} to create database export"
}

# Pull process to pull code from WP-CLI.
provider_pull_wp_code ()
{
	# Execute a generic git pull on code.
	provider_pull_generic_git_pull
}

# Pull process to pull files from WP-CLI
provider_pull_wp_files ()
{
	# Show Error as currently not supported.
	echo-warning "File Pull for WordPress is currently not supported."
}

# Only load the project config if $1 isn't init.
if [[ "$1" != "init" ]]; then
        load_configuration
fi

provider_pull "$@"